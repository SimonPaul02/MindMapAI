# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import orchestrator_pb2 as orchestrator__pb2


class ModelHandlerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.startTask = channel.unary_unary(
                '/ModelHandler/startTask',
                request_serializer=orchestrator__pb2.modelRequirements.SerializeToString,
                response_deserializer=orchestrator__pb2.Empty.FromString,
                )
        self.finishTask = channel.unary_unary(
                '/ModelHandler/finishTask',
                request_serializer=orchestrator__pb2.taskMetrics.SerializeToString,
                response_deserializer=orchestrator__pb2.metricsJson.FromString,
                )
        self.sendToModel = channel.unary_unary(
                '/ModelHandler/sendToModel',
                request_serializer=orchestrator__pb2.taskRequest.SerializeToString,
                response_deserializer=orchestrator__pb2.modelRequest.FromString,
                )
        self.returnToTask = channel.unary_unary(
                '/ModelHandler/returnToTask',
                request_serializer=orchestrator__pb2.modelAnswer.SerializeToString,
                response_deserializer=orchestrator__pb2.modelAnswer.FromString,
                )
        self.registerModel = channel.unary_unary(
                '/ModelHandler/registerModel',
                request_serializer=orchestrator__pb2.modelDefinition.SerializeToString,
                response_deserializer=orchestrator__pb2.Empty.FromString,
                )


class ModelHandlerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def startTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def finishTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendToModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def returnToTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelHandlerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'startTask': grpc.unary_unary_rpc_method_handler(
                    servicer.startTask,
                    request_deserializer=orchestrator__pb2.modelRequirements.FromString,
                    response_serializer=orchestrator__pb2.Empty.SerializeToString,
            ),
            'finishTask': grpc.unary_unary_rpc_method_handler(
                    servicer.finishTask,
                    request_deserializer=orchestrator__pb2.taskMetrics.FromString,
                    response_serializer=orchestrator__pb2.metricsJson.SerializeToString,
            ),
            'sendToModel': grpc.unary_unary_rpc_method_handler(
                    servicer.sendToModel,
                    request_deserializer=orchestrator__pb2.taskRequest.FromString,
                    response_serializer=orchestrator__pb2.modelRequest.SerializeToString,
            ),
            'returnToTask': grpc.unary_unary_rpc_method_handler(
                    servicer.returnToTask,
                    request_deserializer=orchestrator__pb2.modelAnswer.FromString,
                    response_serializer=orchestrator__pb2.modelAnswer.SerializeToString,
            ),
            'registerModel': grpc.unary_unary_rpc_method_handler(
                    servicer.registerModel,
                    request_deserializer=orchestrator__pb2.modelDefinition.FromString,
                    response_serializer=orchestrator__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ModelHandler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelHandler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def startTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelHandler/startTask',
            orchestrator__pb2.modelRequirements.SerializeToString,
            orchestrator__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def finishTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelHandler/finishTask',
            orchestrator__pb2.taskMetrics.SerializeToString,
            orchestrator__pb2.metricsJson.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendToModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelHandler/sendToModel',
            orchestrator__pb2.taskRequest.SerializeToString,
            orchestrator__pb2.modelRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def returnToTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelHandler/returnToTask',
            orchestrator__pb2.modelAnswer.SerializeToString,
            orchestrator__pb2.modelAnswer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelHandler/registerModel',
            orchestrator__pb2.modelDefinition.SerializeToString,
            orchestrator__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class taskServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.startTask = channel.unary_stream(
                '/taskService/startTask',
                request_serializer=orchestrator__pb2.Empty.SerializeToString,
                response_deserializer=orchestrator__pb2.modelRequirements.FromString,
                )
        self.runTask = channel.unary_stream(
                '/taskService/runTask',
                request_serializer=orchestrator__pb2.Empty.SerializeToString,
                response_deserializer=orchestrator__pb2.taskRequest.FromString,
                )
        self.finishTask = channel.unary_stream(
                '/taskService/finishTask',
                request_serializer=orchestrator__pb2.Empty.SerializeToString,
                response_deserializer=orchestrator__pb2.taskMetrics.FromString,
                )
        self.getModelResponse = channel.unary_unary(
                '/taskService/getModelResponse',
                request_serializer=orchestrator__pb2.modelAnswer.SerializeToString,
                response_deserializer=orchestrator__pb2.Empty.FromString,
                )


class taskServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def startTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def runTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def finishTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getModelResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_taskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'startTask': grpc.unary_stream_rpc_method_handler(
                    servicer.startTask,
                    request_deserializer=orchestrator__pb2.Empty.FromString,
                    response_serializer=orchestrator__pb2.modelRequirements.SerializeToString,
            ),
            'runTask': grpc.unary_stream_rpc_method_handler(
                    servicer.runTask,
                    request_deserializer=orchestrator__pb2.Empty.FromString,
                    response_serializer=orchestrator__pb2.taskRequest.SerializeToString,
            ),
            'finishTask': grpc.unary_stream_rpc_method_handler(
                    servicer.finishTask,
                    request_deserializer=orchestrator__pb2.Empty.FromString,
                    response_serializer=orchestrator__pb2.taskMetrics.SerializeToString,
            ),
            'getModelResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.getModelResponse,
                    request_deserializer=orchestrator__pb2.modelAnswer.FromString,
                    response_serializer=orchestrator__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'taskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class taskService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def startTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/taskService/startTask',
            orchestrator__pb2.Empty.SerializeToString,
            orchestrator__pb2.modelRequirements.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def runTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/taskService/runTask',
            orchestrator__pb2.Empty.SerializeToString,
            orchestrator__pb2.taskRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def finishTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/taskService/finishTask',
            orchestrator__pb2.Empty.SerializeToString,
            orchestrator__pb2.taskMetrics.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getModelResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taskService/getModelResponse',
            orchestrator__pb2.modelAnswer.SerializeToString,
            orchestrator__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ModelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.predict = channel.unary_unary(
                '/Model/predict',
                request_serializer=orchestrator__pb2.modelRequest.SerializeToString,
                response_deserializer=orchestrator__pb2.Empty.FromString,
                )
        self.sendPrediction = channel.unary_stream(
                '/Model/sendPrediction',
                request_serializer=orchestrator__pb2.Empty.SerializeToString,
                response_deserializer=orchestrator__pb2.modelAnswer.FromString,
                )
        self.publishMetrics = channel.unary_unary(
                '/Model/publishMetrics',
                request_serializer=orchestrator__pb2.metricsJson.SerializeToString,
                response_deserializer=orchestrator__pb2.Empty.FromString,
                )
        self.registerModel = channel.unary_unary(
                '/Model/registerModel',
                request_serializer=orchestrator__pb2.Empty.SerializeToString,
                response_deserializer=orchestrator__pb2.modelDefinition.FromString,
                )


class ModelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendPrediction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def publishMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'predict': grpc.unary_unary_rpc_method_handler(
                    servicer.predict,
                    request_deserializer=orchestrator__pb2.modelRequest.FromString,
                    response_serializer=orchestrator__pb2.Empty.SerializeToString,
            ),
            'sendPrediction': grpc.unary_stream_rpc_method_handler(
                    servicer.sendPrediction,
                    request_deserializer=orchestrator__pb2.Empty.FromString,
                    response_serializer=orchestrator__pb2.modelAnswer.SerializeToString,
            ),
            'publishMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.publishMetrics,
                    request_deserializer=orchestrator__pb2.metricsJson.FromString,
                    response_serializer=orchestrator__pb2.Empty.SerializeToString,
            ),
            'registerModel': grpc.unary_unary_rpc_method_handler(
                    servicer.registerModel,
                    request_deserializer=orchestrator__pb2.Empty.FromString,
                    response_serializer=orchestrator__pb2.modelDefinition.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Model', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Model(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Model/predict',
            orchestrator__pb2.modelRequest.SerializeToString,
            orchestrator__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendPrediction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Model/sendPrediction',
            orchestrator__pb2.Empty.SerializeToString,
            orchestrator__pb2.modelAnswer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def publishMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Model/publishMetrics',
            orchestrator__pb2.metricsJson.SerializeToString,
            orchestrator__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Model/registerModel',
            orchestrator__pb2.Empty.SerializeToString,
            orchestrator__pb2.modelDefinition.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
